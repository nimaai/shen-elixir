"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.<defprolog> (V1808) (let Parse_shen.<predicate*> (shen.<predicate*> V1808) (if (not (= (fail) Parse_shen.<predicate*>)) (let Parse_shen.<clauses*> (shen.<clauses*> Parse_shen.<predicate*>) (if (not (= (fail) Parse_shen.<clauses*>)) (shen.pair (hd Parse_shen.<clauses*>) (hd (shen.prolog->shen (map (lambda Parse_X (shen.insert-predicate (shen.hdtl Parse_shen.<predicate*>) Parse_X)) (shen.hdtl Parse_shen.<clauses*>))))) (fail))) (fail))))

(defun shen.prolog-error (V1817 V1818) (cond ((and (cons? V1818) (and (cons? (tl V1818)) (= () (tl (tl V1818))))) (simple-error (cn "prolog syntax error in " (shen.app V1817 (cn " here:

 " (shen.app (shen.next-50 50 (hd V1818)) "
" shen.a)) shen.a)))) (true (simple-error (cn "prolog syntax error in " (shen.app V1817 "
" shen.a))))))

(defun shen.next-50 (V1825 V1826) (cond ((= () V1826) "") ((= 0 V1825) "") ((cons? V1826) (cn (shen.decons-string (hd V1826)) (shen.next-50 (- V1825 1) (tl V1826)))) (true (shen.f_error shen.next-50))))

(defun shen.decons-string (V1828) (cond ((and (cons? V1828) (and (= cons (hd V1828)) (and (cons? (tl V1828)) (and (cons? (tl (tl V1828))) (= () (tl (tl (tl V1828)))))))) (shen.app (shen.eval-cons V1828) " " shen.s)) (true (shen.app V1828 " " shen.r))))

(defun shen.insert-predicate (V1831 V1832) (cond ((and (cons? V1832) (and (cons? (tl V1832)) (= () (tl (tl V1832))))) (cons (cons V1831 (hd V1832)) (cons :- (tl V1832)))) (true (shen.f_error shen.insert-predicate))))

(defun shen.<predicate*> (V1834) (if (cons? (hd V1834)) (let Parse_X (hd (hd V1834)) (shen.pair (hd (shen.pair (tl (hd V1834)) (shen.hdtl V1834))) Parse_X)) (fail)))

(defun shen.<clauses*> (V1836) (let YaccParse (let Parse_shen.<clause*> (shen.<clause*> V1836) (if (not (= (fail) Parse_shen.<clause*>)) (let Parse_shen.<clauses*> (shen.<clauses*> Parse_shen.<clause*>) (if (not (= (fail) Parse_shen.<clauses*>)) (shen.pair (hd Parse_shen.<clauses*>) (cons (shen.hdtl Parse_shen.<clause*>) (shen.hdtl Parse_shen.<clauses*>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1836) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<clause*> (V1838) (let Parse_shen.<head*> (shen.<head*> V1838) (if (not (= (fail) Parse_shen.<head*>)) (if (and (cons? (hd Parse_shen.<head*>)) (= <-- (hd (hd Parse_shen.<head*>)))) (let Parse_shen.<body*> (shen.<body*> (shen.pair (tl (hd Parse_shen.<head*>)) (shen.hdtl Parse_shen.<head*>))) (if (not (= (fail) Parse_shen.<body*>)) (let Parse_shen.<end*> (shen.<end*> Parse_shen.<body*>) (if (not (= (fail) Parse_shen.<end*>)) (shen.pair (hd Parse_shen.<end*>) (cons (shen.hdtl Parse_shen.<head*>) (cons (shen.hdtl Parse_shen.<body*>) ()))) (fail))) (fail))) (fail)) (fail))))

(defun shen.<head*> (V1840) (let YaccParse (let Parse_shen.<term*> (shen.<term*> V1840) (if (not (= (fail) Parse_shen.<term*>)) (let Parse_shen.<head*> (shen.<head*> Parse_shen.<term*>) (if (not (= (fail) Parse_shen.<head*>)) (shen.pair (hd Parse_shen.<head*>) (cons (shen.hdtl Parse_shen.<term*>) (shen.hdtl Parse_shen.<head*>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1840) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<term*> (V1842) (if (cons? (hd V1842)) (let Parse_X (hd (hd V1842)) (if (and (not (= <-- Parse_X)) (shen.legitimate-term? Parse_X)) (shen.pair (hd (shen.pair (tl (hd V1842)) (shen.hdtl V1842))) (shen.eval-cons Parse_X)) (fail))) (fail)))

(defun shen.legitimate-term? (V1848) (cond ((and (cons? V1848) (and (= cons (hd V1848)) (and (cons? (tl V1848)) (and (cons? (tl (tl V1848))) (= () (tl (tl (tl V1848)))))))) (and (shen.legitimate-term? (hd (tl V1848))) (shen.legitimate-term? (hd (tl (tl V1848)))))) ((and (cons? V1848) (and (= mode (hd V1848)) (and (cons? (tl V1848)) (and (cons? (tl (tl V1848))) (and (= + (hd (tl (tl V1848)))) (= () (tl (tl (tl V1848))))))))) (shen.legitimate-term? (hd (tl V1848)))) ((and (cons? V1848) (and (= mode (hd V1848)) (and (cons? (tl V1848)) (and (cons? (tl (tl V1848))) (and (= - (hd (tl (tl V1848)))) (= () (tl (tl (tl V1848))))))))) (shen.legitimate-term? (hd (tl V1848)))) ((cons? V1848) false) (true true)))

(defun shen.eval-cons (V1850) (cond ((and (cons? V1850) (and (= cons (hd V1850)) (and (cons? (tl V1850)) (and (cons? (tl (tl V1850))) (= () (tl (tl (tl V1850)))))))) (cons (shen.eval-cons (hd (tl V1850))) (shen.eval-cons (hd (tl (tl V1850)))))) ((and (cons? V1850) (and (= mode (hd V1850)) (and (cons? (tl V1850)) (and (cons? (tl (tl V1850))) (= () (tl (tl (tl V1850)))))))) (cons mode (cons (shen.eval-cons (hd (tl V1850))) (tl (tl V1850))))) (true V1850)))

(defun shen.<body*> (V1852) (let YaccParse (let Parse_shen.<literal*> (shen.<literal*> V1852) (if (not (= (fail) Parse_shen.<literal*>)) (let Parse_shen.<body*> (shen.<body*> Parse_shen.<literal*>) (if (not (= (fail) Parse_shen.<body*>)) (shen.pair (hd Parse_shen.<body*>) (cons (shen.hdtl Parse_shen.<literal*>) (shen.hdtl Parse_shen.<body*>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1852) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<literal*> (V1854) (let YaccParse (if (and (cons? (hd V1854)) (= ! (hd (hd V1854)))) (shen.pair (hd (shen.pair (tl (hd V1854)) (shen.hdtl V1854))) (cons cut (cons (intern "Throwcontrol") ()))) (fail)) (if (= YaccParse (fail)) (if (cons? (hd V1854)) (let Parse_X (hd (hd V1854)) (if (cons? Parse_X) (shen.pair (hd (shen.pair (tl (hd V1854)) (shen.hdtl V1854))) Parse_X) (fail))) (fail)) YaccParse)))

(defun shen.<end*> (V1856) (if (cons? (hd V1856)) (let Parse_X (hd (hd V1856)) (if (= Parse_X ;) (shen.pair (hd (shen.pair (tl (hd V1856)) (shen.hdtl V1856))) Parse_X) (fail))) (fail)))

(defun cut (V1860 V1861 V1862) (let Result (thaw V1862) (if (= Result false) V1860 Result)))

(defun shen.insert_modes (V1864) (cond ((and (cons? V1864) (and (= mode (hd V1864)) (and (cons? (tl V1864)) (and (cons? (tl (tl V1864))) (= () (tl (tl (tl V1864)))))))) V1864) ((= () V1864) ()) ((cons? V1864) (cons (cons mode (cons (hd V1864) (cons + ()))) (cons mode (cons (shen.insert_modes (tl V1864)) (cons - ()))))) (true V1864)))

(defun shen.s-prolog (V1866) (map (lambda X (eval X)) (shen.prolog->shen V1866)))

(defun shen.prolog->shen (V1868) (map (lambda X (shen.compile_prolog_procedure X)) (shen.group_clauses (map (lambda X (shen.s-prolog_clause X)) (mapcan (lambda X (shen.head_abstraction X)) V1868)))))

(defun shen.s-prolog_clause (V1870) (cond ((and (cons? V1870) (and (cons? (tl V1870)) (and (= :- (hd (tl V1870))) (and (cons? (tl (tl V1870))) (= () (tl (tl (tl V1870)))))))) (cons (hd V1870) (cons :- (cons (map (lambda X (shen.s-prolog_literal X)) (hd (tl (tl V1870)))) ())))) (true (shen.f_error shen.s-prolog_clause))))

(defun shen.head_abstraction (V1872) (cond ((and (cons? V1872) (and (cons? (tl V1872)) (and (= :- (hd (tl V1872))) (and (cons? (tl (tl V1872))) (and (= () (tl (tl (tl V1872)))) (trap-error (< (shen.complexity_head (hd V1872)) (value shen.*maxcomplexity*)) (lambda _ false))))))) (cons V1872 ())) ((and (cons? V1872) (and (cons? (hd V1872)) (and (cons? (tl V1872)) (and (= :- (hd (tl V1872))) (and (cons? (tl (tl V1872))) (= () (tl (tl (tl V1872))))))))) (let Terms (map (lambda Y (gensym V)) (tl (hd V1872))) (let XTerms (shen.rcons_form (shen.remove_modes (tl (hd V1872)))) (let Literal (cons unify (cons (shen.cons_form Terms) (cons XTerms ()))) (let Clause (cons (cons (hd (hd V1872)) Terms) (cons :- (cons (cons Literal (hd (tl (tl V1872)))) ()))) (cons Clause ())))))) (true (shen.f_error shen.head_abstraction))))

(defun shen.complexity_head (V1878) (cond ((cons? V1878) (shen.safe-product (map (lambda X (shen.complexity X)) (tl V1878)))) (true (shen.f_error shen.complexity_head))))

(defun shen.safe-multiply (V1881 V1882) (* V1881 V1882))

(defun shen.complexity (V1891) (cond ((and (cons? V1891) (and (= mode (hd V1891)) (and (cons? (tl V1891)) (and (cons? (hd (tl V1891))) (and (= mode (hd (hd (tl V1891)))) (and (cons? (tl (hd (tl V1891)))) (and (cons? (tl (tl (hd (tl V1891))))) (and (= () (tl (tl (tl (hd (tl V1891)))))) (and (cons? (tl (tl V1891))) (= () (tl (tl (tl V1891))))))))))))) (shen.complexity (hd (tl V1891)))) ((and (cons? V1891) (and (= mode (hd V1891)) (and (cons? (tl V1891)) (and (cons? (hd (tl V1891))) (and (cons? (tl (tl V1891))) (and (= + (hd (tl (tl V1891)))) (= () (tl (tl (tl V1891)))))))))) (shen.safe-multiply 2 (shen.safe-multiply (shen.complexity (cons mode (cons (hd (hd (tl V1891))) (tl (tl V1891))))) (shen.complexity (cons mode (cons (tl (hd (tl V1891))) (tl (tl V1891)))))))) ((and (cons? V1891) (and (= mode (hd V1891)) (and (cons? (tl V1891)) (and (cons? (hd (tl V1891))) (and (cons? (tl (tl V1891))) (and (= - (hd (tl (tl V1891)))) (= () (tl (tl (tl V1891)))))))))) (shen.safe-multiply (shen.complexity (cons mode (cons (hd (hd (tl V1891))) (tl (tl V1891))))) (shen.complexity (cons mode (cons (tl (hd (tl V1891))) (tl (tl V1891))))))) ((and (cons? V1891) (and (= mode (hd V1891)) (and (cons? (tl V1891)) (and (cons? (tl (tl V1891))) (and (= () (tl (tl (tl V1891)))) (variable? (hd (tl V1891)))))))) 1) ((and (cons? V1891) (and (= mode (hd V1891)) (and (cons? (tl V1891)) (and (cons? (tl (tl V1891))) (and (= + (hd (tl (tl V1891)))) (= () (tl (tl (tl V1891))))))))) 2) ((and (cons? V1891) (and (= mode (hd V1891)) (and (cons? (tl V1891)) (and (cons? (tl (tl V1891))) (and (= - (hd (tl (tl V1891)))) (= () (tl (tl (tl V1891))))))))) 1) (true (shen.complexity (cons mode (cons V1891 (cons + ())))))))

(defun shen.safe-product (V1893) (cond ((= () V1893) 1) ((cons? V1893) (shen.safe-multiply (hd V1893) (shen.safe-product (tl V1893)))) (true (shen.f_error shen.safe-product))))

(defun shen.s-prolog_literal (V1895) (cond ((and (cons? V1895) (and (= is (hd V1895)) (and (cons? (tl V1895)) (and (cons? (tl (tl V1895))) (= () (tl (tl (tl V1895)))))))) (cons bind (cons (hd (tl V1895)) (cons (shen.insert_deref (hd (tl (tl V1895)))) ())))) ((and (cons? V1895) (and (= when (hd V1895)) (and (cons? (tl V1895)) (= () (tl (tl V1895)))))) (cons fwhen (cons (shen.insert_deref (hd (tl V1895))) ()))) ((and (cons? V1895) (and (= bind (hd V1895)) (and (cons? (tl V1895)) (and (cons? (tl (tl V1895))) (= () (tl (tl (tl V1895)))))))) (cons bind (cons (hd (tl V1895)) (cons (shen.insert_lazyderef (hd (tl (tl V1895)))) ())))) ((and (cons? V1895) (and (= fwhen (hd V1895)) (and (cons? (tl V1895)) (= () (tl (tl V1895)))))) (cons fwhen (cons (shen.insert_lazyderef (hd (tl V1895))) ()))) ((cons? V1895) V1895) (true (shen.f_error shen.s-prolog_literal))))

(defun shen.insert_deref (V1897) (cond ((variable? V1897) (cons shen.deref (cons V1897 (cons ProcessN ())))) ((cons? V1897) (cons (shen.insert_deref (hd V1897)) (shen.insert_deref (tl V1897)))) (true V1897)))

(defun shen.insert_lazyderef (V1899) (cond ((variable? V1899) (cons shen.lazyderef (cons V1899 (cons ProcessN ())))) ((cons? V1899) (cons (shen.insert_lazyderef (hd V1899)) (shen.insert_lazyderef (tl V1899)))) (true V1899)))

(defun shen.group_clauses (V1901) (cond ((= () V1901) ()) ((cons? V1901) (let Group (shen.collect (lambda X (shen.same_predicate? (hd V1901) X)) V1901) (let Rest (difference V1901 Group) (cons Group (shen.group_clauses Rest))))) (true (shen.f_error shen.group_clauses))))

(defun shen.collect (V1906 V1907) (cond ((= () V1907) ()) ((cons? V1907) (if (V1906 (hd V1907)) (cons (hd V1907) (shen.collect V1906 (tl V1907))) (shen.collect V1906 (tl V1907)))) (true (shen.f_error shen.collect))))

(defun shen.same_predicate? (V1926 V1927) (cond ((and (cons? V1926) (and (cons? (hd V1926)) (and (cons? V1927) (cons? (hd V1927))))) (= (hd (hd V1926)) (hd (hd V1927)))) (true (shen.f_error shen.same_predicate?))))

(defun shen.compile_prolog_procedure (V1929) (let F (shen.procedure_name V1929) (let Shen (shen.clauses-to-shen F V1929) Shen)))

(defun shen.procedure_name (V1943) (cond ((and (cons? V1943) (and (cons? (hd V1943)) (cons? (hd (hd V1943))))) (hd (hd (hd V1943)))) (true (shen.f_error shen.procedure_name))))

(defun shen.clauses-to-shen (V1946 V1947) (let Linear (map (lambda X (shen.linearise-clause X)) V1947) (let Arity (shen.prolog-aritycheck V1946 (map (lambda X (head X)) V1947)) (let Parameters (shen.parameters Arity) (let AUM_instructions (map (lambda X (shen.aum X Parameters)) Linear) (let Code (shen.catch-cut (shen.nest-disjunct (map (lambda X (shen.aum_to_shen X)) AUM_instructions))) (let ShenDef (cons define (cons V1946 (append Parameters (append (cons ProcessN (cons Continuation ())) (cons -> (cons Code ())))))) ShenDef)))))))

(defun shen.catch-cut (V1949) (cond ((not (shen.occurs? cut V1949)) V1949) (true (cons let (cons Throwcontrol (cons (cons shen.catchpoint ()) (cons (cons shen.cutpoint (cons Throwcontrol (cons V1949 ()))) ())))))))

(defun shen.catchpoint () (set shen.*catch* (+ 1 (value shen.*catch*))))

(defun shen.cutpoint (V1957 V1958) (cond ((= V1958 V1957) false) (true V1958)))

(defun shen.nest-disjunct (V1960) (cond ((and (cons? V1960) (= () (tl V1960))) (hd V1960)) ((cons? V1960) (shen.lisp-or (hd V1960) (shen.nest-disjunct (tl V1960)))) (true (shen.f_error shen.nest-disjunct))))

(defun shen.lisp-or (V1963 V1964) (cons let (cons Case (cons V1963 (cons (cons if (cons (cons = (cons Case (cons false ()))) (cons V1964 (cons Case ())))) ())))))

(defun shen.prolog-aritycheck (V1969 V1970) (cond ((and (cons? V1970) (= () (tl V1970))) (- (length (hd V1970)) 1)) ((and (cons? V1970) (cons? (tl V1970))) (if (= (length (hd V1970)) (length (hd (tl V1970)))) (shen.prolog-aritycheck V1969 (tl V1970)) (simple-error (cn "arity error in prolog procedure " (shen.app (cons V1969 ()) "
" shen.a))))) (true (shen.f_error shen.prolog-aritycheck))))

(defun shen.linearise-clause (V1972) (cond ((and (cons? V1972) (and (cons? (tl V1972)) (and (= :- (hd (tl V1972))) (and (cons? (tl (tl V1972))) (= () (tl (tl (tl V1972)))))))) (let Linear (shen.linearise (cons (hd V1972) (tl (tl V1972)))) (shen.clause_form Linear))) (true (shen.f_error shen.linearise-clause))))

(defun shen.clause_form (V1974) (cond ((and (cons? V1974) (and (cons? (tl V1974)) (= () (tl (tl V1974))))) (cons (shen.explicit_modes (hd V1974)) (cons :- (cons (shen.cf_help (hd (tl V1974))) ())))) (true (shen.f_error shen.clause_form))))

(defun shen.explicit_modes (V1976) (cond ((cons? V1976) (cons (hd V1976) (map (lambda X (shen.em_help X)) (tl V1976)))) (true (shen.f_error shen.explicit_modes))))

(defun shen.em_help (V1978) (cond ((and (cons? V1978) (and (= mode (hd V1978)) (and (cons? (tl V1978)) (and (cons? (tl (tl V1978))) (= () (tl (tl (tl V1978)))))))) V1978) (true (cons mode (cons V1978 (cons + ()))))))

(defun shen.cf_help (V1980) (cond ((and (cons? V1980) (and (= where (hd V1980)) (and (cons? (tl V1980)) (and (cons? (hd (tl V1980))) (and (= = (hd (hd (tl V1980)))) (and (cons? (tl (hd (tl V1980)))) (and (cons? (tl (tl (hd (tl V1980))))) (and (= () (tl (tl (tl (hd (tl V1980)))))) (and (cons? (tl (tl V1980))) (= () (tl (tl (tl V1980))))))))))))) (cons (cons (if (value shen.*occurs*) unify! unify) (tl (hd (tl V1980)))) (shen.cf_help (hd (tl (tl V1980)))))) (true V1980)))

(defun occurs-check (V1986) (cond ((= + V1986) (set shen.*occurs* true)) ((= - V1986) (set shen.*occurs* false)) (true (simple-error "occurs-check expects + or -
"))))

(defun shen.aum (V1989 V1990) (cond ((and (cons? V1989) (and (cons? (hd V1989)) (and (cons? (tl V1989)) (and (= :- (hd (tl V1989))) (and (cons? (tl (tl V1989))) (= () (tl (tl (tl V1989))))))))) (let MuApplication (shen.make_mu_application (cons shen.mu (cons (tl (hd V1989)) (cons (shen.continuation_call (tl (hd V1989)) (hd (tl (tl V1989)))) ()))) V1990) (shen.mu_reduction MuApplication +))) (true (shen.f_error shen.aum))))

(defun shen.continuation_call (V1993 V1994) (let VTerms (cons ProcessN (shen.extract_vars V1993)) (let VBody (shen.extract_vars V1994) (let Free (remove Throwcontrol (difference VBody VTerms)) (shen.cc_help Free V1994)))))

(defun remove (V1997 V1998) (shen.remove-h V1997 V1998 ()))

(defun shen.remove-h (V2005 V2006 V2007) (cond ((= () V2006) (reverse V2007)) ((and (cons? V2006) (= (hd V2006) V2005)) (shen.remove-h (hd V2006) (tl V2006) V2007)) ((cons? V2006) (shen.remove-h V2005 (tl V2006) (cons (hd V2006) V2007))) (true (shen.f_error shen.remove-h))))

(defun shen.cc_help (V2010 V2011) (cond ((and (= () V2010) (= () V2011)) (cons shen.pop (cons shen.the (cons shen.stack ())))) ((= () V2011) (cons shen.rename (cons shen.the (cons shen.variables (cons in (cons V2010 (cons and (cons shen.then (cons (cons shen.pop (cons shen.the (cons shen.stack ()))) ()))))))))) ((= () V2010) (cons call (cons shen.the (cons shen.continuation (cons V2011 ()))))) (true (cons shen.rename (cons shen.the (cons shen.variables (cons in (cons V2010 (cons and (cons shen.then (cons (cons call (cons shen.the (cons shen.continuation (cons V2011 ())))) ())))))))))))

(defun shen.make_mu_application (V2014 V2015) (cond ((and (cons? V2014) (and (= shen.mu (hd V2014)) (and (cons? (tl V2014)) (and (= () (hd (tl V2014))) (and (cons? (tl (tl V2014))) (and (= () (tl (tl (tl V2014)))) (= () V2015))))))) (hd (tl (tl V2014)))) ((and (cons? V2014) (and (= shen.mu (hd V2014)) (and (cons? (tl V2014)) (and (cons? (hd (tl V2014))) (and (cons? (tl (tl V2014))) (and (= () (tl (tl (tl V2014)))) (cons? V2015))))))) (cons (cons shen.mu (cons (hd (hd (tl V2014))) (cons (shen.make_mu_application (cons shen.mu (cons (tl (hd (tl V2014))) (tl (tl V2014)))) (tl V2015)) ()))) (cons (hd V2015) ()))) (true (shen.f_error shen.make_mu_application))))

(defun shen.mu_reduction (V2024 V2025) (cond ((and (cons? V2024) (and (cons? (hd V2024)) (and (= shen.mu (hd (hd V2024))) (and (cons? (tl (hd V2024))) (and (cons? (hd (tl (hd V2024)))) (and (= mode (hd (hd (tl (hd V2024))))) (and (cons? (tl (hd (tl (hd V2024))))) (and (cons? (tl (tl (hd (tl (hd V2024)))))) (and (= () (tl (tl (tl (hd (tl (hd V2024))))))) (and (cons? (tl (tl (hd V2024)))) (and (= () (tl (tl (tl (hd V2024))))) (and (cons? (tl V2024)) (= () (tl (tl V2024))))))))))))))) (shen.mu_reduction (cons (cons shen.mu (cons (hd (tl (hd (tl (hd V2024))))) (tl (tl (hd V2024))))) (tl V2024)) (hd (tl (tl (hd (tl (hd V2024)))))))) ((and (cons? V2024) (and (cons? (hd V2024)) (and (= shen.mu (hd (hd V2024))) (and (cons? (tl (hd V2024))) (and (cons? (tl (tl (hd V2024)))) (and (= () (tl (tl (tl (hd V2024))))) (and (cons? (tl V2024)) (and (= () (tl (tl V2024))) (= _ (hd (tl (hd V2024)))))))))))) (shen.mu_reduction (hd (tl (tl (hd V2024)))) V2025)) ((and (cons? V2024) (and (cons? (hd V2024)) (and (= shen.mu (hd (hd V2024))) (and (cons? (tl (hd V2024))) (and (cons? (tl (tl (hd V2024)))) (and (= () (tl (tl (tl (hd V2024))))) (and (cons? (tl V2024)) (and (= () (tl (tl V2024))) (shen.ephemeral_variable? (hd (tl (hd V2024))) (hd (tl V2024))))))))))) (subst (hd (tl V2024)) (hd (tl (hd V2024))) (shen.mu_reduction (hd (tl (tl (hd V2024)))) V2025))) ((and (cons? V2024) (and (cons? (hd V2024)) (and (= shen.mu (hd (hd V2024))) (and (cons? (tl (hd V2024))) (and (cons? (tl (tl (hd V2024)))) (and (= () (tl (tl (tl (hd V2024))))) (and (cons? (tl V2024)) (and (= () (tl (tl V2024))) (variable? (hd (tl (hd V2024)))))))))))) (cons let (cons (hd (tl (hd V2024))) (cons shen.be (cons (hd (tl V2024)) (cons in (cons (shen.mu_reduction (hd (tl (tl (hd V2024)))) V2025) ()))))))) ((and (cons? V2024) (and (cons? (hd V2024)) (and (= shen.mu (hd (hd V2024))) (and (cons? (tl (hd V2024))) (and (cons? (tl (tl (hd V2024)))) (and (= () (tl (tl (tl (hd V2024))))) (and (cons? (tl V2024)) (and (= () (tl (tl V2024))) (and (= - V2025) (shen.prolog_constant? (hd (tl (hd V2024))))))))))))) (let Z (gensym V) (cons let (cons Z (cons shen.be (cons (cons shen.the (cons shen.result (cons shen.of (cons shen.dereferencing (tl V2024))))) (cons in (cons (cons if (cons (cons Z (cons is (cons identical (cons shen.to (cons (hd (tl (hd V2024))) ()))))) (cons shen.then (cons (shen.mu_reduction (hd (tl (tl (hd V2024)))) -) (cons shen.else (cons shen.failed! ())))))) ())))))))) ((and (cons? V2024) (and (cons? (hd V2024)) (and (= shen.mu (hd (hd V2024))) (and (cons? (tl (hd V2024))) (and (cons? (tl (tl (hd V2024)))) (and (= () (tl (tl (tl (hd V2024))))) (and (cons? (tl V2024)) (and (= () (tl (tl V2024))) (and (= + V2025) (shen.prolog_constant? (hd (tl (hd V2024))))))))))))) (let Z (gensym V) (cons let (cons Z (cons shen.be (cons (cons shen.the (cons shen.result (cons shen.of (cons shen.dereferencing (tl V2024))))) (cons in (cons (cons if (cons (cons Z (cons is (cons identical (cons shen.to (cons (hd (tl (hd V2024))) ()))))) (cons shen.then (cons (shen.mu_reduction (hd (tl (tl (hd V2024)))) +) (cons shen.else (cons (cons if (cons (cons Z (cons is (cons shen.a (cons shen.variable ())))) (cons shen.then (cons (cons bind (cons Z (cons shen.to (cons (hd (tl (hd V2024))) (cons in (cons (shen.mu_reduction (hd (tl (tl (hd V2024)))) +) ())))))) (cons shen.else (cons shen.failed! ())))))) ())))))) ())))))))) ((and (cons? V2024) (and (cons? (hd V2024)) (and (= shen.mu (hd (hd V2024))) (and (cons? (tl (hd V2024))) (and (cons? (hd (tl (hd V2024)))) (and (cons? (tl (tl (hd V2024)))) (and (= () (tl (tl (tl (hd V2024))))) (and (cons? (tl V2024)) (and (= () (tl (tl V2024))) (= - V2025)))))))))) (let Z (gensym V) (cons let (cons Z (cons shen.be (cons (cons shen.the (cons shen.result (cons shen.of (cons shen.dereferencing (tl V2024))))) (cons in (cons (cons if (cons (cons Z (cons is (cons shen.a (cons shen.non-empty (cons list ()))))) (cons shen.then (cons (shen.mu_reduction (cons (cons shen.mu (cons (hd (hd (tl (hd V2024)))) (cons (cons (cons shen.mu (cons (tl (hd (tl (hd V2024)))) (tl (tl (hd V2024))))) (cons (cons shen.the (cons tail (cons shen.of (cons Z ())))) ())) ()))) (cons (cons shen.the (cons head (cons shen.of (cons Z ())))) ())) -) (cons shen.else (cons shen.failed! ())))))) ())))))))) ((and (cons? V2024) (and (cons? (hd V2024)) (and (= shen.mu (hd (hd V2024))) (and (cons? (tl (hd V2024))) (and (cons? (hd (tl (hd V2024)))) (and (cons? (tl (tl (hd V2024)))) (and (= () (tl (tl (tl (hd V2024))))) (and (cons? (tl V2024)) (and (= () (tl (tl V2024))) (= + V2025)))))))))) (let Z (gensym V) (cons let (cons Z (cons shen.be (cons (cons shen.the (cons shen.result (cons shen.of (cons shen.dereferencing (tl V2024))))) (cons in (cons (cons if (cons (cons Z (cons is (cons shen.a (cons shen.non-empty (cons list ()))))) (cons shen.then (cons (shen.mu_reduction (cons (cons shen.mu (cons (hd (hd (tl (hd V2024)))) (cons (cons (cons shen.mu (cons (tl (hd (tl (hd V2024)))) (tl (tl (hd V2024))))) (cons (cons shen.the (cons tail (cons shen.of (cons Z ())))) ())) ()))) (cons (cons shen.the (cons head (cons shen.of (cons Z ())))) ())) +) (cons shen.else (cons (cons if (cons (cons Z (cons is (cons shen.a (cons shen.variable ())))) (cons shen.then (cons (cons shen.rename (cons shen.the (cons shen.variables (cons in (cons (shen.extract_vars (hd (tl (hd V2024)))) (cons and (cons shen.then (cons (cons bind (cons Z (cons shen.to (cons (shen.rcons_form (shen.remove_modes (hd (tl (hd V2024))))) (cons in (cons (shen.mu_reduction (hd (tl (tl (hd V2024)))) +) ())))))) ())))))))) (cons shen.else (cons shen.failed! ())))))) ())))))) ())))))))) (true V2024)))

(defun shen.rcons_form (V2027) (cond ((cons? V2027) (cons cons (cons (shen.rcons_form (hd V2027)) (cons (shen.rcons_form (tl V2027)) ())))) (true V2027)))

(defun shen.remove_modes (V2029) (cond ((and (cons? V2029) (and (= mode (hd V2029)) (and (cons? (tl V2029)) (and (cons? (tl (tl V2029))) (and (= + (hd (tl (tl V2029)))) (= () (tl (tl (tl V2029))))))))) (shen.remove_modes (hd (tl V2029)))) ((and (cons? V2029) (and (= mode (hd V2029)) (and (cons? (tl V2029)) (and (cons? (tl (tl V2029))) (and (= - (hd (tl (tl V2029)))) (= () (tl (tl (tl V2029))))))))) (shen.remove_modes (hd (tl V2029)))) ((cons? V2029) (cons (shen.remove_modes (hd V2029)) (shen.remove_modes (tl V2029)))) (true V2029)))

(defun shen.ephemeral_variable? (V2032 V2033) (and (variable? V2032) (variable? V2033)))

(defun shen.prolog_constant? (V2043) (cond ((cons? V2043) false) (true true)))

(defun shen.aum_to_shen (V2045) (cond ((and (cons? V2045) (and (= let (hd V2045)) (and (cons? (tl V2045)) (and (cons? (tl (tl V2045))) (and (= shen.be (hd (tl (tl V2045)))) (and (cons? (tl (tl (tl V2045)))) (and (cons? (tl (tl (tl (tl V2045))))) (and (= in (hd (tl (tl (tl (tl V2045)))))) (and (cons? (tl (tl (tl (tl (tl V2045)))))) (= () (tl (tl (tl (tl (tl (tl V2045)))))))))))))))) (cons let (cons (hd (tl V2045)) (cons (shen.aum_to_shen (hd (tl (tl (tl V2045))))) (cons (shen.aum_to_shen (hd (tl (tl (tl (tl (tl V2045))))))) ()))))) ((and (cons? V2045) (and (= shen.the (hd V2045)) (and (cons? (tl V2045)) (and (= shen.result (hd (tl V2045))) (and (cons? (tl (tl V2045))) (and (= shen.of (hd (tl (tl V2045)))) (and (cons? (tl (tl (tl V2045)))) (and (= shen.dereferencing (hd (tl (tl (tl V2045))))) (and (cons? (tl (tl (tl (tl V2045))))) (= () (tl (tl (tl (tl (tl V2045))))))))))))))) (cons shen.lazyderef (cons (shen.aum_to_shen (hd (tl (tl (tl (tl V2045)))))) (cons ProcessN ())))) ((and (cons? V2045) (and (= if (hd V2045)) (and (cons? (tl V2045)) (and (cons? (tl (tl V2045))) (and (= shen.then (hd (tl (tl V2045)))) (and (cons? (tl (tl (tl V2045)))) (and (cons? (tl (tl (tl (tl V2045))))) (and (= shen.else (hd (tl (tl (tl (tl V2045)))))) (and (cons? (tl (tl (tl (tl (tl V2045)))))) (= () (tl (tl (tl (tl (tl (tl V2045)))))))))))))))) (cons if (cons (shen.aum_to_shen (hd (tl V2045))) (cons (shen.aum_to_shen (hd (tl (tl (tl V2045))))) (cons (shen.aum_to_shen (hd (tl (tl (tl (tl (tl V2045))))))) ()))))) ((and (cons? V2045) (and (cons? (tl V2045)) (and (= is (hd (tl V2045))) (and (cons? (tl (tl V2045))) (and (= shen.a (hd (tl (tl V2045)))) (and (cons? (tl (tl (tl V2045)))) (and (= shen.variable (hd (tl (tl (tl V2045))))) (= () (tl (tl (tl (tl V2045)))))))))))) (cons shen.pvar? (cons (hd V2045) ()))) ((and (cons? V2045) (and (cons? (tl V2045)) (and (= is (hd (tl V2045))) (and (cons? (tl (tl V2045))) (and (= shen.a (hd (tl (tl V2045)))) (and (cons? (tl (tl (tl V2045)))) (and (= shen.non-empty (hd (tl (tl (tl V2045))))) (and (cons? (tl (tl (tl (tl V2045))))) (and (= list (hd (tl (tl (tl (tl V2045)))))) (= () (tl (tl (tl (tl (tl V2045))))))))))))))) (cons cons? (cons (hd V2045) ()))) ((and (cons? V2045) (and (= shen.rename (hd V2045)) (and (cons? (tl V2045)) (and (= shen.the (hd (tl V2045))) (and (cons? (tl (tl V2045))) (and (= shen.variables (hd (tl (tl V2045)))) (and (cons? (tl (tl (tl V2045)))) (and (= in (hd (tl (tl (tl V2045))))) (and (cons? (tl (tl (tl (tl V2045))))) (and (= () (hd (tl (tl (tl (tl V2045)))))) (and (cons? (tl (tl (tl (tl (tl V2045)))))) (and (= and (hd (tl (tl (tl (tl (tl V2045))))))) (and (cons? (tl (tl (tl (tl (tl (tl V2045))))))) (and (= shen.then (hd (tl (tl (tl (tl (tl (tl V2045)))))))) (and (cons? (tl (tl (tl (tl (tl (tl (tl V2045)))))))) (= () (tl (tl (tl (tl (tl (tl (tl (tl V2045)))))))))))))))))))))))) (shen.aum_to_shen (hd (tl (tl (tl (tl (tl (tl (tl V2045)))))))))) ((and (cons? V2045) (and (= shen.rename (hd V2045)) (and (cons? (tl V2045)) (and (= shen.the (hd (tl V2045))) (and (cons? (tl (tl V2045))) (and (= shen.variables (hd (tl (tl V2045)))) (and (cons? (tl (tl (tl V2045)))) (and (= in (hd (tl (tl (tl V2045))))) (and (cons? (tl (tl (tl (tl V2045))))) (and (cons? (hd (tl (tl (tl (tl V2045)))))) (and (cons? (tl (tl (tl (tl (tl V2045)))))) (and (= and (hd (tl (tl (tl (tl (tl V2045))))))) (and (cons? (tl (tl (tl (tl (tl (tl V2045))))))) (and (= shen.then (hd (tl (tl (tl (tl (tl (tl V2045)))))))) (and (cons? (tl (tl (tl (tl (tl (tl (tl V2045)))))))) (= () (tl (tl (tl (tl (tl (tl (tl (tl V2045)))))))))))))))))))))))) (cons let (cons (hd (hd (tl (tl (tl (tl V2045)))))) (cons (cons shen.newpv (cons ProcessN ())) (cons (shen.aum_to_shen (cons shen.rename (cons shen.the (cons shen.variables (cons in (cons (tl (hd (tl (tl (tl (tl V2045)))))) (tl (tl (tl (tl (tl V2045))))))))))) ()))))) ((and (cons? V2045) (and (= bind (hd V2045)) (and (cons? (tl V2045)) (and (cons? (tl (tl V2045))) (and (= shen.to (hd (tl (tl V2045)))) (and (cons? (tl (tl (tl V2045)))) (and (cons? (tl (tl (tl (tl V2045))))) (and (= in (hd (tl (tl (tl (tl V2045)))))) (and (cons? (tl (tl (tl (tl (tl V2045)))))) (= () (tl (tl (tl (tl (tl (tl V2045)))))))))))))))) (cons do (cons (cons shen.bindv (cons (hd (tl V2045)) (cons (shen.chwild (hd (tl (tl (tl V2045))))) (cons ProcessN ())))) (cons (cons let (cons Result (cons (shen.aum_to_shen (hd (tl (tl (tl (tl (tl V2045))))))) (cons (cons do (cons (cons shen.unbindv (cons (hd (tl V2045)) (cons ProcessN ()))) (cons Result ()))) ())))) ())))) ((and (cons? V2045) (and (cons? (tl V2045)) (and (= is (hd (tl V2045))) (and (cons? (tl (tl V2045))) (and (= identical (hd (tl (tl V2045)))) (and (cons? (tl (tl (tl V2045)))) (and (= shen.to (hd (tl (tl (tl V2045))))) (and (cons? (tl (tl (tl (tl V2045))))) (= () (tl (tl (tl (tl (tl V2045)))))))))))))) (cons = (cons (hd (tl (tl (tl (tl V2045))))) (cons (hd V2045) ())))) ((= shen.failed! V2045) false) ((and (cons? V2045) (and (= shen.the (hd V2045)) (and (cons? (tl V2045)) (and (= head (hd (tl V2045))) (and (cons? (tl (tl V2045))) (and (= shen.of (hd (tl (tl V2045)))) (and (cons? (tl (tl (tl V2045)))) (= () (tl (tl (tl (tl V2045)))))))))))) (cons hd (tl (tl (tl V2045))))) ((and (cons? V2045) (and (= shen.the (hd V2045)) (and (cons? (tl V2045)) (and (= tail (hd (tl V2045))) (and (cons? (tl (tl V2045))) (and (= shen.of (hd (tl (tl V2045)))) (and (cons? (tl (tl (tl V2045)))) (= () (tl (tl (tl (tl V2045)))))))))))) (cons tl (tl (tl (tl V2045))))) ((and (cons? V2045) (and (= shen.pop (hd V2045)) (and (cons? (tl V2045)) (and (= shen.the (hd (tl V2045))) (and (cons? (tl (tl V2045))) (and (= shen.stack (hd (tl (tl V2045)))) (= () (tl (tl (tl V2045)))))))))) (cons do (cons (cons shen.incinfs ()) (cons (cons thaw (cons Continuation ())) ())))) ((and (cons? V2045) (and (= call (hd V2045)) (and (cons? (tl V2045)) (and (= shen.the (hd (tl V2045))) (and (cons? (tl (tl V2045))) (and (= shen.continuation (hd (tl (tl V2045)))) (and (cons? (tl (tl (tl V2045)))) (= () (tl (tl (tl (tl V2045)))))))))))) (cons do (cons (cons shen.incinfs ()) (cons (shen.call_the_continuation (shen.chwild (hd (tl (tl (tl V2045))))) ProcessN Continuation) ())))) (true V2045)))

(defun shen.chwild (V2047) (cond ((= V2047 _) (cons shen.newpv (cons ProcessN ()))) ((cons? V2047) (map (lambda Z (shen.chwild Z)) V2047)) (true V2047)))

(defun shen.newpv (V2049) (let Count+1 (+ (<-address (value shen.*varcounter*) V2049) 1) (let IncVar (address-> (value shen.*varcounter*) V2049 Count+1) (let Vector (<-address (value shen.*prologvectors*) V2049) (let ResizeVectorIfNeeded (if (= Count+1 (limit Vector)) (shen.resizeprocessvector V2049 Count+1) shen.skip) (shen.mk-pvar Count+1))))))

(defun shen.resizeprocessvector (V2052 V2053) (let Vector (<-address (value shen.*prologvectors*) V2052) (let BigVector (shen.resize-vector Vector (+ V2053 V2053) shen.-null-) (address-> (value shen.*prologvectors*) V2052 BigVector))))

(defun shen.resize-vector (V2057 V2058 V2059) (let BigVector (address-> (absvector (+ 1 V2058)) 0 V2058) (shen.copy-vector V2057 BigVector (limit V2057) V2058 V2059)))

(defun shen.copy-vector (V2065 V2066 V2067 V2068 V2069) (shen.copy-vector-stage-2 (+ 1 V2067) (+ V2068 1) V2069 (shen.copy-vector-stage-1 1 V2065 V2066 (+ 1 V2067))))

(defun shen.copy-vector-stage-1 (V2077 V2078 V2079 V2080) (cond ((= V2080 V2077) V2079) (true (shen.copy-vector-stage-1 (+ 1 V2077) V2078 (address-> V2079 V2077 (<-address V2078 V2077)) V2080))))

(defun shen.copy-vector-stage-2 (V2088 V2089 V2090 V2091) (cond ((= V2089 V2088) V2091) (true (shen.copy-vector-stage-2 (+ V2088 1) V2089 V2090 (address-> V2091 V2088 V2090)))))

(defun shen.mk-pvar (V2093) (address-> (address-> (absvector 2) 0 shen.pvar) 1 V2093))

(defun shen.pvar? (V2095) (and (absvector? V2095) (= (<-address/or V2095 0 (freeze shen.not-pvar)) shen.pvar)))

(defun shen.bindv (V2099 V2100 V2101) (let Vector (<-address (value shen.*prologvectors*) V2101) (address-> Vector (<-address V2099 1) V2100)))

(defun shen.unbindv (V2104 V2105) (let Vector (<-address (value shen.*prologvectors*) V2105) (address-> Vector (<-address V2104 1) shen.-null-)))

(defun shen.incinfs () (set shen.*infs* (+ 1 (value shen.*infs*))))

(defun shen.call_the_continuation (V2109 V2110 V2111) (cond ((and (cons? V2109) (and (cons? (hd V2109)) (= () (tl V2109)))) (cons (hd (hd V2109)) (append (tl (hd V2109)) (cons V2110 (cons V2111 ()))))) ((and (cons? V2109) (cons? (hd V2109))) (let NewContinuation (shen.newcontinuation (tl V2109) V2110 V2111) (cons (hd (hd V2109)) (append (tl (hd V2109)) (cons V2110 (cons NewContinuation ())))))) (true (shen.f_error shen.call_the_continuation))))

(defun shen.newcontinuation (V2115 V2116 V2117) (cond ((= () V2115) V2117) ((and (cons? V2115) (cons? (hd V2115))) (cons freeze (cons (cons (hd (hd V2115)) (append (tl (hd V2115)) (cons V2116 (cons (shen.newcontinuation (tl V2115) V2116 V2117) ())))) ()))) (true (shen.f_error shen.newcontinuation))))

(defun return (V2125 V2126 V2127) (shen.deref V2125 V2126))

(defun shen.measure&return (V2135 V2136 V2137) (do (shen.prhush (shen.app (value shen.*infs*) " inferences
" shen.a) (stoutput)) (shen.deref V2135 V2136)))

(defun unify (V2142 V2143 V2144 V2145) (shen.lzy= (shen.lazyderef V2142 V2144) (shen.lazyderef V2143 V2144) V2144 V2145))

(defun shen.lzy= (V2167 V2168 V2169 V2170) (cond ((= V2168 V2167) (thaw V2170)) ((shen.pvar? V2167) (bind V2167 V2168 V2169 V2170)) ((shen.pvar? V2168) (bind V2168 V2167 V2169 V2170)) ((and (cons? V2167) (cons? V2168)) (shen.lzy= (shen.lazyderef (hd V2167) V2169) (shen.lazyderef (hd V2168) V2169) V2169 (freeze (shen.lzy= (shen.lazyderef (tl V2167) V2169) (shen.lazyderef (tl V2168) V2169) V2169 V2170)))) (true false)))

(defun shen.deref (V2173 V2174) (cond ((cons? V2173) (cons (shen.deref (hd V2173) V2174) (shen.deref (tl V2173) V2174))) (true (if (shen.pvar? V2173) (let Value (shen.valvector V2173 V2174) (if (= Value shen.-null-) V2173 (shen.deref Value V2174))) V2173))))

(defun shen.lazyderef (V2177 V2178) (if (shen.pvar? V2177) (let Value (shen.valvector V2177 V2178) (if (= Value shen.-null-) V2177 (shen.lazyderef Value V2178))) V2177))

(defun shen.valvector (V2181 V2182) (<-address (<-address (value shen.*prologvectors*) V2182) (<-address V2181 1)))

(defun unify! (V2187 V2188 V2189 V2190) (shen.lzy=! (shen.lazyderef V2187 V2189) (shen.lazyderef V2188 V2189) V2189 V2190))

(defun shen.lzy=! (V2212 V2213 V2214 V2215) (cond ((= V2213 V2212) (thaw V2215)) ((and (shen.pvar? V2212) (not (shen.occurs? V2212 (shen.deref V2213 V2214)))) (bind V2212 V2213 V2214 V2215)) ((and (shen.pvar? V2213) (not (shen.occurs? V2213 (shen.deref V2212 V2214)))) (bind V2213 V2212 V2214 V2215)) ((and (cons? V2212) (cons? V2213)) (shen.lzy=! (shen.lazyderef (hd V2212) V2214) (shen.lazyderef (hd V2213) V2214) V2214 (freeze (shen.lzy=! (shen.lazyderef (tl V2212) V2214) (shen.lazyderef (tl V2213) V2214) V2214 V2215)))) (true false)))

(defun shen.occurs? (V2227 V2228) (cond ((= V2228 V2227) true) ((cons? V2228) (or (shen.occurs? V2227 (hd V2228)) (shen.occurs? V2227 (tl V2228)))) (true false)))

(defun identical (V2233 V2234 V2235 V2236) (shen.lzy== (shen.lazyderef V2233 V2235) (shen.lazyderef V2234 V2235) V2235 V2236))

(defun shen.lzy== (V2258 V2259 V2260 V2261) (cond ((= V2259 V2258) (thaw V2261)) ((and (cons? V2258) (cons? V2259)) (shen.lzy== (shen.lazyderef (hd V2258) V2260) (shen.lazyderef (hd V2259) V2260) V2260 (freeze (shen.lzy== (tl V2258) (tl V2259) V2260 V2261)))) (true false)))

(defun shen.pvar (V2263) (cn "Var" (shen.app (<-address V2263 1) "" shen.a)))

(defun bind (V2268 V2269 V2270 V2271) (do (shen.bindv V2268 V2269 V2270) (let Result (thaw V2271) (do (shen.unbindv V2268 V2270) Result))))

(defun fwhen (V2289 V2290 V2291) (cond ((= true V2289) (thaw V2291)) ((= false V2289) false) (true (simple-error (cn "fwhen expects a boolean: not " (shen.app V2289 "%" shen.s))))))

(defun call (V2307 V2308 V2309) (cond ((cons? V2307) (shen.call-help (function (shen.lazyderef (hd V2307) V2308)) (tl V2307) V2308 V2309)) (true false)))

(defun shen.call-help (V2314 V2315 V2316 V2317) (cond ((= () V2315) (V2314 V2316 V2317)) ((cons? V2315) (shen.call-help (V2314 (hd V2315)) (tl V2315) V2316 V2317)) (true (shen.f_error shen.call-help))))

(defun shen.intprolog (V2319) (cond ((and (cons? V2319) (cons? (hd V2319))) (let ProcessN (shen.start-new-prolog-process) (shen.intprolog-help (hd (hd V2319)) (shen.insert-prolog-variables (cons (tl (hd V2319)) (cons (tl V2319) ())) ProcessN) ProcessN))) (true (shen.f_error shen.intprolog))))

(defun shen.intprolog-help (V2323 V2324 V2325) (cond ((and (cons? V2324) (and (cons? (tl V2324)) (= () (tl (tl V2324))))) (shen.intprolog-help-help V2323 (hd V2324) (hd (tl V2324)) V2325)) (true (shen.f_error shen.intprolog-help))))

(defun shen.intprolog-help-help (V2330 V2331 V2332 V2333) (cond ((= () V2331) (V2330 V2333 (freeze (shen.call-rest V2332 V2333)))) ((cons? V2331) (shen.intprolog-help-help (V2330 (hd V2331)) (tl V2331) V2332 V2333)) (true (shen.f_error shen.intprolog-help-help))))

(defun shen.call-rest (V2338 V2339) (cond ((= () V2338) true) ((and (cons? V2338) (and (cons? (hd V2338)) (cons? (tl (hd V2338))))) (shen.call-rest (cons (cons ((hd (hd V2338)) (hd (tl (hd V2338)))) (tl (tl (hd V2338)))) (tl V2338)) V2339)) ((and (cons? V2338) (and (cons? (hd V2338)) (= () (tl (hd V2338))))) ((hd (hd V2338)) V2339 (freeze (shen.call-rest (tl V2338) V2339)))) (true (shen.f_error shen.call-rest))))

(defun shen.start-new-prolog-process () (let IncrementProcessCounter (set shen.*process-counter* (+ 1 (value shen.*process-counter*))) (shen.initialise-prolog IncrementProcessCounter)))

(defun shen.insert-prolog-variables (V2342 V2343) (shen.insert-prolog-variables-help V2342 (shen.flatten V2342) V2343))

(defun shen.insert-prolog-variables-help (V2351 V2352 V2353) (cond ((= () V2352) V2351) ((and (cons? V2352) (variable? (hd V2352))) (let V (shen.newpv V2353) (let XV/Y (subst V (hd V2352) V2351) (let Z-Y (remove (hd V2352) (tl V2352)) (shen.insert-prolog-variables-help XV/Y Z-Y V2353))))) ((cons? V2352) (shen.insert-prolog-variables-help V2351 (tl V2352) V2353)) (true (shen.f_error shen.insert-prolog-variables-help))))

(defun shen.initialise-prolog (V2355) (let Vector (address-> (value shen.*prologvectors*) V2355 (shen.fillvector (vector 10) 1 10 shen.-null-)) (let Counter (address-> (value shen.*varcounter*) V2355 1) V2355)))



