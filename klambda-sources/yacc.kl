"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.yacc (V4334) (cond ((and (cons? V4334) (and (= defcc (hd V4334)) (cons? (tl V4334)))) (shen.yacc->shen (hd (tl V4334)) (tl (tl V4334)))) (true (shen.f_error shen.yacc))))

(defun shen.yacc->shen (V4337 V4338) (let CCRules (shen.split_cc_rules true V4338 ()) (let CCBody (map (lambda X (shen.cc_body X)) CCRules) (let YaccCases (shen.yacc_cases CCBody) (cons define (cons V4337 (cons Stream (cons -> (cons (shen.kill-code YaccCases) ())))))))))

(defun shen.kill-code (V4340) (cond ((> (occurrences kill V4340) 0) (cons trap-error (cons V4340 (cons (cons lambda (cons E (cons (cons shen.analyse-kill (cons E ())) ()))) ())))) (true V4340)))

(defun kill () (simple-error "yacc kill"))

(defun shen.analyse-kill (V4342) (let String (error-to-string V4342) (if (= String "yacc kill") (fail) V4342)))

(defun shen.split_cc_rules (V4348 V4349 V4350) (cond ((and (= () V4349) (= () V4350)) ()) ((= () V4349) (cons (shen.split_cc_rule V4348 (reverse V4350) ()) ())) ((and (cons? V4349) (= ; (hd V4349))) (cons (shen.split_cc_rule V4348 (reverse V4350) ()) (shen.split_cc_rules V4348 (tl V4349) ()))) ((cons? V4349) (shen.split_cc_rules V4348 (tl V4349) (cons (hd V4349) V4350))) (true (shen.f_error shen.split_cc_rules))))

(defun shen.split_cc_rule (V4358 V4359 V4360) (cond ((and (cons? V4359) (and (= := (hd V4359)) (and (cons? (tl V4359)) (= () (tl (tl V4359)))))) (cons (reverse V4360) (tl V4359))) ((and (cons? V4359) (and (= := (hd V4359)) (and (cons? (tl V4359)) (and (cons? (tl (tl V4359))) (and (= where (hd (tl (tl V4359)))) (and (cons? (tl (tl (tl V4359)))) (= () (tl (tl (tl (tl V4359))))))))))) (cons (reverse V4360) (cons (cons where (cons (hd (tl (tl (tl V4359)))) (cons (hd (tl V4359)) ()))) ()))) ((= () V4359) (do (shen.semantic-completion-warning V4358 V4360) (shen.split_cc_rule V4358 (cons := (cons (shen.default_semantics (reverse V4360)) ())) V4360))) ((cons? V4359) (shen.split_cc_rule V4358 (tl V4359) (cons (hd V4359) V4360))) (true (shen.f_error shen.split_cc_rule))))

(defun shen.semantic-completion-warning (V4371 V4372) (cond ((= true V4371) (do (shen.prhush "warning: " (stoutput)) (do (for-each (lambda X (shen.prhush (shen.app X " " shen.a) (stoutput))) (reverse V4372)) (shen.prhush "has no semantics.
" (stoutput))))) (true shen.skip)))

(defun shen.default_semantics (V4374) (cond ((= () V4374) ()) ((and (cons? V4374) (and (= () (tl V4374)) (shen.grammar_symbol? (hd V4374)))) (hd V4374)) ((and (cons? V4374) (shen.grammar_symbol? (hd V4374))) (cons append (cons (hd V4374) (cons (shen.default_semantics (tl V4374)) ())))) ((cons? V4374) (cons cons (cons (hd V4374) (cons (shen.default_semantics (tl V4374)) ())))) (true (shen.f_error shen.default_semantics))))

(defun shen.grammar_symbol? (V4376) (and (symbol? V4376) (let Cs (shen.strip-pathname (explode V4376)) (and (= (hd Cs) "<") (= (hd (reverse Cs)) ">")))))

(defun shen.yacc_cases (V4378) (cond ((and (cons? V4378) (= () (tl V4378))) (hd V4378)) ((cons? V4378) (let P YaccParse (cons let (cons P (cons (hd V4378) (cons (cons if (cons (cons = (cons P (cons (cons fail ()) ()))) (cons (shen.yacc_cases (tl V4378)) (cons P ())))) ())))))) (true (shen.f_error shen.yacc_cases))))

(defun shen.cc_body (V4380) (cond ((and (cons? V4380) (and (cons? (tl V4380)) (= () (tl (tl V4380))))) (shen.syntax (hd V4380) Stream (hd (tl V4380)))) (true (shen.f_error shen.cc_body))))

(defun shen.syntax (V4384 V4385 V4386) (cond ((and (= () V4384) (and (cons? V4386) (and (= where (hd V4386)) (and (cons? (tl V4386)) (and (cons? (tl (tl V4386))) (= () (tl (tl (tl V4386))))))))) (cons if (cons (shen.semantics (hd (tl V4386))) (cons (cons shen.pair (cons (cons hd (cons V4385 ())) (cons (shen.semantics (hd (tl (tl V4386)))) ()))) (cons (cons fail ()) ()))))) ((= () V4384) (cons shen.pair (cons (cons hd (cons V4385 ())) (cons (shen.semantics V4386) ())))) ((cons? V4384) (if (shen.grammar_symbol? (hd V4384)) (shen.recursive_descent V4384 V4385 V4386) (if (variable? (hd V4384)) (shen.variable-match V4384 V4385 V4386) (if (shen.jump_stream? (hd V4384)) (shen.jump_stream V4384 V4385 V4386) (if (shen.terminal? (hd V4384)) (shen.check_stream V4384 V4385 V4386) (if (cons? (hd V4384)) (shen.list-stream (shen.decons (hd V4384)) (tl V4384) V4385 V4386) (simple-error (shen.app (hd V4384) " is not legal syntax
" shen.a)))))))) (true (shen.f_error shen.syntax))))

(defun shen.list-stream (V4391 V4392 V4393 V4394) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V4393 ())) ())) (cons (cons cons? (cons (cons hd (cons (cons hd (cons V4393 ())) ())) ())) ()))) (let Placeholder (gensym shen.place) (let RunOn (shen.syntax V4392 (cons shen.pair (cons (cons tl (cons (cons hd (cons V4393 ())) ())) (cons (cons hd (cons (cons tl (cons V4393 ())) ())) ()))) V4394) (let Action (shen.insert-runon RunOn Placeholder (shen.syntax V4391 (cons shen.pair (cons (cons hd (cons (cons hd (cons V4393 ())) ())) (cons (cons hd (cons (cons tl (cons V4393 ())) ())) ()))) Placeholder)) (cons if (cons Test (cons Action (cons (cons fail ()) ())))))))))

(defun shen.decons (V4396) (cond ((and (cons? V4396) (and (= cons (hd V4396)) (and (cons? (tl V4396)) (and (cons? (tl (tl V4396))) (and (= () (hd (tl (tl V4396)))) (= () (tl (tl (tl V4396))))))))) (cons (hd (tl V4396)) ())) ((and (cons? V4396) (and (= cons (hd V4396)) (and (cons? (tl V4396)) (and (cons? (tl (tl V4396))) (= () (tl (tl (tl V4396)))))))) (cons (hd (tl V4396)) (shen.decons (hd (tl (tl V4396)))))) (true V4396)))

(defun shen.insert-runon (V4411 V4412 V4413) (cond ((and (cons? V4413) (and (= shen.pair (hd V4413)) (and (cons? (tl V4413)) (and (cons? (tl (tl V4413))) (and (= () (tl (tl (tl V4413)))) (= (hd (tl (tl V4413))) V4412)))))) V4411) ((cons? V4413) (map (lambda Z (shen.insert-runon V4411 V4412 Z)) V4413)) (true V4413)))

(defun shen.strip-pathname (V4419) (cond ((not (element? "." V4419)) V4419) ((cons? V4419) (shen.strip-pathname (tl V4419))) (true (shen.f_error shen.strip-pathname))))

(defun shen.recursive_descent (V4423 V4424 V4425) (cond ((cons? V4423) (let Test (cons (hd V4423) (cons V4424 ())) (let Action (shen.syntax (tl V4423) (concat Parse_ (hd V4423)) V4425) (let Else (cons fail ()) (cons let (cons (concat Parse_ (hd V4423)) (cons Test (cons (cons if (cons (cons not (cons (cons = (cons (cons fail ()) (cons (concat Parse_ (hd V4423)) ()))) ())) (cons Action (cons Else ())))) ())))))))) (true (shen.f_error shen.recursive_descent))))

(defun shen.variable-match (V4429 V4430 V4431) (cond ((cons? V4429) (let Test (cons cons? (cons (cons hd (cons V4430 ())) ())) (let Action (cons let (cons (concat Parse_ (hd V4429)) (cons (cons hd (cons (cons hd (cons V4430 ())) ())) (cons (shen.syntax (tl V4429) (cons shen.pair (cons (cons tl (cons (cons hd (cons V4430 ())) ())) (cons (cons shen.hdtl (cons V4430 ())) ()))) V4431) ())))) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.variable-match))))

(defun shen.terminal? (V4441) (cond ((cons? V4441) false) ((variable? V4441) false) (true true)))

(defun shen.jump_stream? (V4447) (cond ((= V4447 _) true) (true false)))

(defun shen.check_stream (V4451 V4452 V4453) (cond ((cons? V4451) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V4452 ())) ())) (cons (cons = (cons (hd V4451) (cons (cons hd (cons (cons hd (cons V4452 ())) ())) ()))) ()))) (let Action (shen.syntax (tl V4451) (cons shen.pair (cons (cons tl (cons (cons hd (cons V4452 ())) ())) (cons (cons shen.hdtl (cons V4452 ())) ()))) V4453) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.check_stream))))

(defun shen.jump_stream (V4457 V4458 V4459) (cond ((cons? V4457) (let Test (cons cons? (cons (cons hd (cons V4458 ())) ())) (let Action (shen.syntax (tl V4457) (cons shen.pair (cons (cons tl (cons (cons hd (cons V4458 ())) ())) (cons (cons shen.hdtl (cons V4458 ())) ()))) V4459) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.jump_stream))))

(defun shen.semantics (V4461) (cond ((= () V4461) ()) ((shen.grammar_symbol? V4461) (cons shen.hdtl (cons (concat Parse_ V4461) ()))) ((variable? V4461) (concat Parse_ V4461)) ((cons? V4461) (map (lambda Z (shen.semantics Z)) V4461)) (true V4461)))

(defun shen.snd-or-fail (V4469) (cond ((and (cons? V4469) (and (cons? (tl V4469)) (= () (tl (tl V4469))))) (hd (tl V4469))) (true (fail))))

(defun fail () shen.fail!)(defun shen.pair (V4472 V4473) (cons V4472 (cons V4473 ())))

(defun shen.hdtl (V4475) (hd (tl V4475)))

(defun <!> (V4483) (cond ((and (cons? V4483) (and (cons? (tl V4483)) (= () (tl (tl V4483))))) (cons () (cons (hd V4483) ()))) (true (fail))))

(defun <e> (V4489) (cond ((and (cons? V4489) (and (cons? (tl V4489)) (= () (tl (tl V4489))))) (cons (hd V4489) (cons () ()))) (true (shen.f_error <e>))))



