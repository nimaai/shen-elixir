"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.datatype-error (V2634) (cond ((and (cons? V2634) (and (cons? (tl V2634)) (= () (tl (tl V2634))))) (simple-error (cn "datatype syntax error here:

 " (shen.app (shen.next-50 50 (hd V2634)) "
" shen.a)))) (true (shen.f_error shen.datatype-error))))

(defun shen.<datatype-rules> (V2636) (let YaccParse (let Parse_shen.<datatype-rule> (shen.<datatype-rule> V2636) (if (not (= (fail) Parse_shen.<datatype-rule>)) (let Parse_shen.<datatype-rules> (shen.<datatype-rules> Parse_shen.<datatype-rule>) (if (not (= (fail) Parse_shen.<datatype-rules>)) (shen.pair (hd Parse_shen.<datatype-rules>) (cons (shen.hdtl Parse_shen.<datatype-rule>) (shen.hdtl Parse_shen.<datatype-rules>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2636) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<datatype-rule> (V2638) (let YaccParse (let Parse_shen.<side-conditions> (shen.<side-conditions> V2638) (if (not (= (fail) Parse_shen.<side-conditions>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<side-conditions>) (if (not (= (fail) Parse_shen.<premises>)) (let Parse_shen.<singleunderline> (shen.<singleunderline> Parse_shen.<premises>) (if (not (= (fail) Parse_shen.<singleunderline>)) (let Parse_shen.<conclusion> (shen.<conclusion> Parse_shen.<singleunderline>) (if (not (= (fail) Parse_shen.<conclusion>)) (shen.pair (hd Parse_shen.<conclusion>) (shen.sequent shen.single (cons (shen.hdtl Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<conclusion>) ()))))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<side-conditions> (shen.<side-conditions> V2638) (if (not (= (fail) Parse_shen.<side-conditions>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<side-conditions>) (if (not (= (fail) Parse_shen.<premises>)) (let Parse_shen.<doubleunderline> (shen.<doubleunderline> Parse_shen.<premises>) (if (not (= (fail) Parse_shen.<doubleunderline>)) (let Parse_shen.<conclusion> (shen.<conclusion> Parse_shen.<doubleunderline>) (if (not (= (fail) Parse_shen.<conclusion>)) (shen.pair (hd Parse_shen.<conclusion>) (shen.sequent shen.double (cons (shen.hdtl Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<conclusion>) ()))))) (fail))) (fail))) (fail))) (fail))) YaccParse)))

(defun shen.<side-conditions> (V2640) (let YaccParse (let Parse_shen.<side-condition> (shen.<side-condition> V2640) (if (not (= (fail) Parse_shen.<side-condition>)) (let Parse_shen.<side-conditions> (shen.<side-conditions> Parse_shen.<side-condition>) (if (not (= (fail) Parse_shen.<side-conditions>)) (shen.pair (hd Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<side-condition>) (shen.hdtl Parse_shen.<side-conditions>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2640) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<side-condition> (V2642) (let YaccParse (if (and (cons? (hd V2642)) (= if (hd (hd V2642)))) (let Parse_shen.<expr> (shen.<expr> (shen.pair (tl (hd V2642)) (shen.hdtl V2642))) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (cons if (cons (shen.hdtl Parse_shen.<expr>) ()))) (fail))) (fail)) (if (= YaccParse (fail)) (if (and (cons? (hd V2642)) (= let (hd (hd V2642)))) (let Parse_shen.<variable?> (shen.<variable?> (shen.pair (tl (hd V2642)) (shen.hdtl V2642))) (if (not (= (fail) Parse_shen.<variable?>)) (let Parse_shen.<expr> (shen.<expr> Parse_shen.<variable?>) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (cons let (cons (shen.hdtl Parse_shen.<variable?>) (cons (shen.hdtl Parse_shen.<expr>) ())))) (fail))) (fail))) (fail)) YaccParse)))

(defun shen.<variable?> (V2644) (if (cons? (hd V2644)) (let Parse_X (hd (hd V2644)) (if (variable? Parse_X) (shen.pair (hd (shen.pair (tl (hd V2644)) (shen.hdtl V2644))) Parse_X) (fail))) (fail)))

(defun shen.<expr> (V2646) (if (cons? (hd V2646)) (let Parse_X (hd (hd V2646)) (if (not (or (element? Parse_X (cons >> (cons ; ()))) (or (shen.singleunderline? Parse_X) (shen.doubleunderline? Parse_X)))) (shen.pair (hd (shen.pair (tl (hd V2646)) (shen.hdtl V2646))) (shen.remove-bar Parse_X)) (fail))) (fail)))

(defun shen.remove-bar (V2648) (cond ((and (cons? V2648) (and (cons? (tl V2648)) (and (cons? (tl (tl V2648))) (and (= () (tl (tl (tl V2648)))) (= (hd (tl V2648)) bar!))))) (cons (hd V2648) (hd (tl (tl V2648))))) ((cons? V2648) (cons (shen.remove-bar (hd V2648)) (shen.remove-bar (tl V2648)))) (true V2648)))

(defun shen.<premises> (V2650) (let YaccParse (let Parse_shen.<premise> (shen.<premise> V2650) (if (not (= (fail) Parse_shen.<premise>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<premise>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<semicolon-symbol>) (if (not (= (fail) Parse_shen.<premises>)) (shen.pair (hd Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<premise>) (shen.hdtl Parse_shen.<premises>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2650) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<semicolon-symbol> (V2652) (if (cons? (hd V2652)) (let Parse_X (hd (hd V2652)) (if (= Parse_X ;) (shen.pair (hd (shen.pair (tl (hd V2652)) (shen.hdtl V2652))) shen.skip) (fail))) (fail)))

(defun shen.<premise> (V2654) (let YaccParse (if (and (cons? (hd V2654)) (= ! (hd (hd V2654)))) (shen.pair (hd (shen.pair (tl (hd V2654)) (shen.hdtl V2654))) !) (fail)) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<formulae> (shen.<formulae> V2654) (if (not (= (fail) Parse_shen.<formulae>)) (if (and (cons? (hd Parse_shen.<formulae>)) (= >> (hd (hd Parse_shen.<formulae>)))) (let Parse_shen.<formula> (shen.<formula> (shen.pair (tl (hd Parse_shen.<formulae>)) (shen.hdtl Parse_shen.<formulae>))) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (shen.sequent (shen.hdtl Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formula>))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<formula> (shen.<formula> V2654) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (shen.sequent () (shen.hdtl Parse_shen.<formula>))) (fail))) YaccParse)) YaccParse)))

(defun shen.<conclusion> (V2656) (let YaccParse (let Parse_shen.<formulae> (shen.<formulae> V2656) (if (not (= (fail) Parse_shen.<formulae>)) (if (and (cons? (hd Parse_shen.<formulae>)) (= >> (hd (hd Parse_shen.<formulae>)))) (let Parse_shen.<formula> (shen.<formula> (shen.pair (tl (hd Parse_shen.<formulae>)) (shen.hdtl Parse_shen.<formulae>))) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (shen.pair (hd Parse_shen.<semicolon-symbol>) (shen.sequent (shen.hdtl Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formula>))) (fail))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<formula> (shen.<formula> V2656) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (shen.pair (hd Parse_shen.<semicolon-symbol>) (shen.sequent () (shen.hdtl Parse_shen.<formula>))) (fail))) (fail))) YaccParse)))

(defun shen.sequent (V2659 V2660) (@p V2659 V2660))

(defun shen.<formulae> (V2662) (let YaccParse (let Parse_shen.<formula> (shen.<formula> V2662) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<comma-symbol> (shen.<comma-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<comma-symbol>)) (let Parse_shen.<formulae> (shen.<formulae> Parse_shen.<comma-symbol>) (if (not (= (fail) Parse_shen.<formulae>)) (shen.pair (hd Parse_shen.<formulae>) (cons (shen.hdtl Parse_shen.<formula>) (shen.hdtl Parse_shen.<formulae>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<formula> (shen.<formula> V2662) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (cons (shen.hdtl Parse_shen.<formula>) ())) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2662) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)) YaccParse)))

(defun shen.<comma-symbol> (V2664) (if (cons? (hd V2664)) (let Parse_X (hd (hd V2664)) (if (= Parse_X (intern ",")) (shen.pair (hd (shen.pair (tl (hd V2664)) (shen.hdtl V2664))) shen.skip) (fail))) (fail)))

(defun shen.<formula> (V2666) (let YaccParse (let Parse_shen.<expr> (shen.<expr> V2666) (if (not (= (fail) Parse_shen.<expr>)) (if (and (cons? (hd Parse_shen.<expr>)) (= : (hd (hd Parse_shen.<expr>)))) (let Parse_shen.<type> (shen.<type> (shen.pair (tl (hd Parse_shen.<expr>)) (shen.hdtl Parse_shen.<expr>))) (if (not (= (fail) Parse_shen.<type>)) (shen.pair (hd Parse_shen.<type>) (cons (shen.curry (shen.hdtl Parse_shen.<expr>)) (cons : (cons (shen.demodulate (shen.hdtl Parse_shen.<type>)) ())))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<expr> (shen.<expr> V2666) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (shen.hdtl Parse_shen.<expr>)) (fail))) YaccParse)))

(defun shen.<type> (V2668) (let Parse_shen.<expr> (shen.<expr> V2668) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (shen.curry-type (shen.hdtl Parse_shen.<expr>))) (fail))))

(defun shen.<doubleunderline> (V2670) (if (cons? (hd V2670)) (let Parse_X (hd (hd V2670)) (if (shen.doubleunderline? Parse_X) (shen.pair (hd (shen.pair (tl (hd V2670)) (shen.hdtl V2670))) Parse_X) (fail))) (fail)))

(defun shen.<singleunderline> (V2672) (if (cons? (hd V2672)) (let Parse_X (hd (hd V2672)) (if (shen.singleunderline? Parse_X) (shen.pair (hd (shen.pair (tl (hd V2672)) (shen.hdtl V2672))) Parse_X) (fail))) (fail)))

(defun shen.singleunderline? (V2674) (and (symbol? V2674) (shen.sh? (str V2674))))

(defun shen.sh? (V2676) (cond ((= "_" V2676) true) (true (and (= (pos V2676 0) "_") (shen.sh? (tlstr V2676))))))

(defun shen.doubleunderline? (V2678) (and (symbol? V2678) (shen.dh? (str V2678))))

(defun shen.dh? (V2680) (cond ((= "=" V2680) true) (true (and (= (pos V2680 0) "=") (shen.dh? (tlstr V2680))))))

(defun shen.process-datatype (V2683 V2684) (shen.remember-datatype (shen.s-prolog (shen.rules->horn-clauses V2683 V2684))))

(defun shen.remember-datatype (V2690) (cond ((cons? V2690) (do (set shen.*datatypes* (adjoin (hd V2690) (value shen.*datatypes*))) (do (set shen.*alldatatypes* (adjoin (hd V2690) (value shen.*alldatatypes*))) (hd V2690)))) (true (shen.f_error shen.remember-datatype))))

(defun shen.rules->horn-clauses (V2695 V2696) (cond ((= () V2696) ()) ((and (cons? V2696) (and (tuple? (hd V2696)) (= shen.single (fst (hd V2696))))) (cons (shen.rule->horn-clause V2695 (snd (hd V2696))) (shen.rules->horn-clauses V2695 (tl V2696)))) ((and (cons? V2696) (and (tuple? (hd V2696)) (= shen.double (fst (hd V2696))))) (shen.rules->horn-clauses V2695 (append (shen.double->singles (snd (hd V2696))) (tl V2696)))) (true (shen.f_error shen.rules->horn-clauses))))

(defun shen.double->singles (V2698) (cons (shen.right-rule V2698) (cons (shen.left-rule V2698) ())))

(defun shen.right-rule (V2700) (@p shen.single V2700))

(defun shen.left-rule (V2702) (cond ((and (cons? V2702) (and (cons? (tl V2702)) (and (cons? (tl (tl V2702))) (and (tuple? (hd (tl (tl V2702)))) (and (= () (fst (hd (tl (tl V2702))))) (= () (tl (tl (tl V2702))))))))) (let Q (gensym Qv) (let NewConclusion (@p (cons (snd (hd (tl (tl V2702)))) ()) Q) (let NewPremises (cons (@p (map (lambda X (shen.right->left X)) (hd (tl V2702))) Q) ()) (@p shen.single (cons (hd V2702) (cons NewPremises (cons NewConclusion ())))))))) (true (shen.f_error shen.left-rule))))

(defun shen.right->left (V2708) (cond ((and (tuple? V2708) (= () (fst V2708))) (snd V2708)) (true (simple-error "syntax error with ==========
"))))

(defun shen.rule->horn-clause (V2711 V2712) (cond ((and (cons? V2712) (and (cons? (tl V2712)) (and (cons? (tl (tl V2712))) (and (tuple? (hd (tl (tl V2712)))) (= () (tl (tl (tl V2712)))))))) (cons (shen.rule->horn-clause-head V2711 (snd (hd (tl (tl V2712))))) (cons :- (cons (shen.rule->horn-clause-body (hd V2712) (hd (tl V2712)) (fst (hd (tl (tl V2712))))) ())))) (true (shen.f_error shen.rule->horn-clause))))

(defun shen.rule->horn-clause-head (V2715 V2716) (cons V2715 (cons (shen.mode-ify V2716) (cons Context_1957 ()))))

(defun shen.mode-ify (V2718) (cond ((and (cons? V2718) (and (cons? (tl V2718)) (and (= : (hd (tl V2718))) (and (cons? (tl (tl V2718))) (= () (tl (tl (tl V2718)))))))) (cons mode (cons (cons (hd V2718) (cons : (cons (cons mode (cons (hd (tl (tl V2718))) (cons + ()))) ()))) (cons - ())))) (true V2718)))

(defun shen.rule->horn-clause-body (V2722 V2723 V2724) (let Variables (map (lambda X (shen.extract_vars X)) V2724) (let Predicates (map (lambda X (gensym shen.cl)) V2724) (let SearchLiterals (shen.construct-search-literals Predicates Variables Context_1957 Context1_1957) (let SearchClauses (shen.construct-search-clauses Predicates V2724 Variables) (let SideLiterals (shen.construct-side-literals V2722) (let PremissLiterals (map (lambda X (shen.construct-premiss-literal X (empty? V2724))) V2723) (append SearchLiterals (append SideLiterals PremissLiterals)))))))))

(defun shen.construct-search-literals (V2733 V2734 V2735 V2736) (cond ((and (= () V2733) (= () V2734)) ()) (true (shen.csl-help V2733 V2734 V2735 V2736))))

(defun shen.csl-help (V2743 V2744 V2745 V2746) (cond ((and (= () V2743) (= () V2744)) (cons (cons bind (cons ContextOut_1957 (cons V2745 ()))) ())) ((and (cons? V2743) (cons? V2744)) (cons (cons (hd V2743) (cons V2745 (cons V2746 (hd V2744)))) (shen.csl-help (tl V2743) (tl V2744) V2746 (gensym Context)))) (true (shen.f_error shen.csl-help))))

(defun shen.construct-search-clauses (V2750 V2751 V2752) (cond ((and (= () V2750) (and (= () V2751) (= () V2752))) shen.skip) ((and (cons? V2750) (and (cons? V2751) (cons? V2752))) (do (shen.construct-search-clause (hd V2750) (hd V2751) (hd V2752)) (shen.construct-search-clauses (tl V2750) (tl V2751) (tl V2752)))) (true (shen.f_error shen.construct-search-clauses))))

(defun shen.construct-search-clause (V2756 V2757 V2758) (shen.s-prolog (cons (shen.construct-base-search-clause V2756 V2757 V2758) (cons (shen.construct-recursive-search-clause V2756 V2757 V2758) ()))))

(defun shen.construct-base-search-clause (V2762 V2763 V2764) (cons (cons V2762 (cons (cons (shen.mode-ify V2763) In_1957) (cons In_1957 V2764))) (cons :- (cons () ()))))

(defun shen.construct-recursive-search-clause (V2768 V2769 V2770) (cons (cons V2768 (cons (cons Assumption_1957 Assumptions_1957) (cons (cons Assumption_1957 Out_1957) V2770))) (cons :- (cons (cons (cons V2768 (cons Assumptions_1957 (cons Out_1957 V2770))) ()) ()))))

(defun shen.construct-side-literals (V2776) (cond ((= () V2776) ()) ((and (cons? V2776) (and (cons? (hd V2776)) (and (= if (hd (hd V2776))) (and (cons? (tl (hd V2776))) (= () (tl (tl (hd V2776)))))))) (cons (cons when (tl (hd V2776))) (shen.construct-side-literals (tl V2776)))) ((and (cons? V2776) (and (cons? (hd V2776)) (and (= let (hd (hd V2776))) (and (cons? (tl (hd V2776))) (and (cons? (tl (tl (hd V2776)))) (= () (tl (tl (tl (hd V2776)))))))))) (cons (cons is (tl (hd V2776))) (shen.construct-side-literals (tl V2776)))) ((cons? V2776) (shen.construct-side-literals (tl V2776))) (true (shen.f_error shen.construct-side-literals))))

(defun shen.construct-premiss-literal (V2783 V2784) (cond ((tuple? V2783) (cons shen.t* (cons (shen.recursive_cons_form (snd V2783)) (cons (shen.construct-context V2784 (fst V2783)) ())))) ((= ! V2783) (cons cut (cons Throwcontrol ()))) (true (shen.f_error shen.construct-premiss-literal))))

(defun shen.construct-context (V2787 V2788) (cond ((and (= true V2787) (= () V2788)) Context_1957) ((and (= false V2787) (= () V2788)) ContextOut_1957) ((cons? V2788) (cons cons (cons (shen.recursive_cons_form (hd V2788)) (cons (shen.construct-context V2787 (tl V2788)) ())))) (true (shen.f_error shen.construct-context))))

(defun shen.recursive_cons_form (V2790) (cond ((cons? V2790) (cons cons (cons (shen.recursive_cons_form (hd V2790)) (cons (shen.recursive_cons_form (tl V2790)) ())))) (true V2790)))

(defun preclude (V2792) (shen.preclude-h (map (lambda X (shen.intern-type X)) V2792)))

(defun shen.preclude-h (V2794) (let FilterDatatypes (set shen.*datatypes* (difference (value shen.*datatypes*) V2794)) (value shen.*datatypes*)))

(defun include (V2796) (shen.include-h (map (lambda X (shen.intern-type X)) V2796)))

(defun shen.include-h (V2798) (let ValidTypes (intersection V2798 (value shen.*alldatatypes*)) (let NewDatatypes (set shen.*datatypes* (union ValidTypes (value shen.*datatypes*))) (value shen.*datatypes*))))

(defun preclude-all-but (V2800) (shen.preclude-h (difference (value shen.*alldatatypes*) (map (lambda X (shen.intern-type X)) V2800))))

(defun include-all-but (V2802) (shen.include-h (difference (value shen.*alldatatypes*) (map (lambda X (shen.intern-type X)) V2802))))

(defun shen.synonyms-help (V2808) (cond ((= () V2808) (shen.update-demodulation-function (value shen.*tc*) (mapcan (lambda X (shen.demod-rule X)) (value shen.*synonyms*)))) ((and (cons? V2808) (cons? (tl V2808))) (let Vs (difference (shen.extract_vars (hd (tl V2808))) (shen.extract_vars (hd V2808))) (if (empty? Vs) (do (shen.pushnew (cons (hd V2808) (cons (hd (tl V2808)) ())) shen.*synonyms*) (shen.synonyms-help (tl (tl V2808)))) (shen.free_variable_warnings (hd (tl V2808)) Vs)))) (true (simple-error "odd number of synonyms
"))))

(defun shen.pushnew (V2811 V2812) (if (element? V2811 (value V2812)) (value V2812) (set V2812 (cons V2811 (value V2812)))))

(defun shen.demod-rule (V2814) (cond ((and (cons? V2814) (and (cons? (tl V2814)) (= () (tl (tl V2814))))) (cons (shen.rcons_form (hd V2814)) (cons -> (cons (shen.rcons_form (hd (tl V2814))) ())))) (true (shen.f_error shen.demod-rule))))

(defun shen.lambda-of-defun (V2820) (cond ((and (cons? V2820) (and (= defun (hd V2820)) (and (cons? (tl V2820)) (and (cons? (tl (tl V2820))) (and (cons? (hd (tl (tl V2820)))) (and (= () (tl (hd (tl (tl V2820))))) (and (cons? (tl (tl (tl V2820)))) (= () (tl (tl (tl (tl V2820)))))))))))) (eval (cons /. (cons (hd (hd (tl (tl V2820)))) (tl (tl (tl V2820))))))) (true (shen.f_error shen.lambda-of-defun))))

(defun shen.update-demodulation-function (V2823 V2824) (do (tc -) (do (set shen.*demodulation-function* (shen.lambda-of-defun (shen.elim-def (cons define (cons shen.demod (append V2824 (shen.default-rule))))))) (do (if V2823 (tc +) shen.skip) synonyms))))

(defun shen.default-rule () (cons X (cons -> (cons X ()))))



