"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.f_error (V4107) (do (shen.prhush (cn "partial function " (shen.app V4107 ";
" shen.a)) (stoutput)) (do (if (and (not (shen.tracked? V4107)) (y-or-n? (cn "track " (shen.app V4107 "? " shen.a)))) (shen.track-function (ps V4107)) shen.ok) (simple-error "aborted"))))

(defun shen.tracked? (V4109) (element? V4109 (value shen.*tracking*)))

(defun track (V4111) (let Source (ps V4111) (shen.track-function Source)))

(defun shen.track-function (V4113) (cond ((and (cons? V4113) (and (= defun (hd V4113)) (and (cons? (tl V4113)) (and (cons? (tl (tl V4113))) (and (cons? (tl (tl (tl V4113)))) (= () (tl (tl (tl (tl V4113)))))))))) (let KL (cons defun (cons (hd (tl V4113)) (cons (hd (tl (tl V4113))) (cons (shen.insert-tracking-code (hd (tl V4113)) (hd (tl (tl V4113))) (hd (tl (tl (tl V4113))))) ())))) (let Ob (eval-kl KL) (let Tr (set shen.*tracking* (cons Ob (value shen.*tracking*))) Ob)))) (true (shen.f_error shen.track-function))))

(defun shen.insert-tracking-code (V4117 V4118 V4119) (cons do (cons (cons set (cons shen.*call* (cons (cons + (cons (cons value (cons shen.*call* ())) (cons 1 ()))) ()))) (cons (cons do (cons (cons shen.input-track (cons (cons value (cons shen.*call* ())) (cons V4117 (cons (shen.cons_form V4118) ())))) (cons (cons do (cons (cons shen.terpri-or-read-char ()) (cons (cons let (cons Result (cons V4119 (cons (cons do (cons (cons shen.output-track (cons (cons value (cons shen.*call* ())) (cons V4117 (cons Result ())))) (cons (cons do (cons (cons set (cons shen.*call* (cons (cons - (cons (cons value (cons shen.*call* ())) (cons 1 ()))) ()))) (cons (cons do (cons (cons shen.terpri-or-read-char ()) (cons Result ()))) ()))) ()))) ())))) ()))) ()))) ()))))

(set shen.*step* false)

(defun step (V4125) (cond ((= + V4125) (set shen.*step* true)) ((= - V4125) (set shen.*step* false)) (true (simple-error "step expects a + or a -.
"))))

(defun spy (V4131) (cond ((= + V4131) (set shen.*spy* true)) ((= - V4131) (set shen.*spy* false)) (true (simple-error "spy expects a + or a -.
"))))

(defun shen.terpri-or-read-char () (if (value shen.*step*) (shen.check-byte (read-byte (value *stinput*))) (nl 1)))

(defun shen.check-byte (V4137) (cond ((= V4137 (shen.hat)) (simple-error "aborted")) (true true)))

(defun shen.input-track (V4141 V4142 V4143) (do (shen.prhush (cn "
" (shen.app (shen.spaces V4141) (cn "<" (shen.app V4141 (cn "> Inputs to " (shen.app V4142 (cn " 
" (shen.app (shen.spaces V4141) "" shen.a)) shen.a)) shen.a)) shen.a)) (stoutput)) (shen.recursively-print V4143)))

(defun shen.recursively-print (V4145) (cond ((= () V4145) (shen.prhush " ==>" (stoutput))) ((cons? V4145) (do (print (hd V4145)) (do (shen.prhush ", " (stoutput)) (shen.recursively-print (tl V4145))))) (true (shen.f_error shen.recursively-print))))

(defun shen.spaces (V4147) (cond ((= 0 V4147) "") (true (cn " " (shen.spaces (- V4147 1))))))

(defun shen.output-track (V4151 V4152 V4153) (shen.prhush (cn "
" (shen.app (shen.spaces V4151) (cn "<" (shen.app V4151 (cn "> Output from " (shen.app V4152 (cn " 
" (shen.app (shen.spaces V4151) (cn "==> " (shen.app V4153 "" shen.s)) shen.a)) shen.a)) shen.a)) shen.a)) (stoutput)))

(defun untrack (V4155) (let Tracking (value shen.*tracking*) (let Tracking (set shen.*tracking* (remove V4155 Tracking)) (eval (ps V4155)))))

(defun profile (V4157) (shen.profile-help (ps V4157)))

(defun shen.profile-help (V4163) (cond ((and (cons? V4163) (and (= defun (hd V4163)) (and (cons? (tl V4163)) (and (cons? (tl (tl V4163))) (and (cons? (tl (tl (tl V4163)))) (= () (tl (tl (tl (tl V4163)))))))))) (let G (gensym shen.f) (let Profile (cons defun (cons (hd (tl V4163)) (cons (hd (tl (tl V4163))) (cons (shen.profile-func (hd (tl V4163)) (hd (tl (tl V4163))) (cons G (hd (tl (tl V4163))))) ())))) (let Def (cons defun (cons G (cons (hd (tl (tl V4163))) (cons (subst G (hd (tl V4163)) (hd (tl (tl (tl V4163))))) ())))) (let CompileProfile (shen.eval-without-macros Profile) (let CompileG (shen.eval-without-macros Def) (hd (tl V4163)))))))) (true (simple-error "Cannot profile.
"))))

(defun unprofile (V4165) (untrack V4165))

(defun shen.profile-func (V4169 V4170 V4171) (cons let (cons Start (cons (cons get-time (cons run ())) (cons (cons let (cons Result (cons V4171 (cons (cons let (cons Finish (cons (cons - (cons (cons get-time (cons run ())) (cons Start ()))) (cons (cons let (cons Record (cons (cons shen.put-profile (cons V4169 (cons (cons + (cons (cons shen.get-profile (cons V4169 ())) (cons Finish ()))) ()))) (cons Result ())))) ())))) ())))) ())))))

(defun profile-results (V4173) (let Results (shen.get-profile V4173) (let Initialise (shen.put-profile V4173 0) (@p V4173 Results))))

(defun shen.get-profile (V4175) (get/or V4175 profile (freeze 0) (value *property-vector*)))

(defun shen.put-profile (V4178 V4179) (put V4178 profile V4179 (value *property-vector*)))



